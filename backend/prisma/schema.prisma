// schema.prisma

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model user {
  id                   String               @id @default(uuid())
  name                 String?
  email                String               @unique
  password             String
  isVerified           Boolean              @default(false)
  createdAt            DateTime             @default(now())
  profiles             Profile[]
  posts                Post[]
  comments             Comment[]
  emergencyContacts    EmergencyContact[]
  alerts               Alert[]
  notificationSettings NotificationSetting?
  postVotes            PostVote[]
  verificationCodes    VerificationCode[]
  medications          Medication[]
  doseLogs             DoseLog[]

  @@map("users")
}

model Profile {
  id          String       @id @default(uuid())
  user        user         @relation(fields: [userId], references: [id])
  userId      String
  displayName String
  dob         DateTime?
  notes       String?
  createdAt   DateTime     @default(now())

  @@map("profiles")
}

model Medication {
  id              String        @id @default(uuid())
  user            user          @relation(fields: [userId], references: [id])
  userId          String
  name            String
  brand           String?
  strength        String?
  quantity        Int?
  refillThreshold Int?
  instructions    String?
  createdAt       DateTime      @default(now())
  schedules       MedSchedule[]
  reminders       Reminder[]
  doseLogs        DoseLog[]

  @@map("medications")
}


model MedSchedule {
  id           String     @id @default(uuid())
  medication   Medication @relation(fields: [medicationId], references: [id])
  medicationId String
  timeOfDay    String
  recurrence   String     @default("daily")
  createdAt    DateTime   @default(now())

  @@map("med_schedules")
}

model Reminder {
  id           String     @id @default(uuid())
  medication   Medication @relation(fields: [medicationId], references: [id])
  medicationId String
  scheduledAt  DateTime
  sent         Boolean    @default(false)
  createdAt    DateTime   @default(now())

  @@map("reminders")
}

model DoseLog {
  id           String     @id @default(uuid())
  medication   Medication @relation(fields: [medicationId], references: [id])
  medicationId String
  user         user       @relation(fields: [userId], references: [id])
  userId       String
  takenAt      DateTime   @default(now())
  status       DoseStatus
  note         String?
  createdAt    DateTime   @default(now())

  @@map("dose_logs")
}

enum DoseStatus {
  TAKEN
  MISSED
  SKIPPED
}

model Facility {
  id        String   @id @default(uuid())
  name      String
  type      String
  address   String?
  city      String?
  state     String?
  country   String?
  lat       Float?
  lng       Float?
  phone     String?
  website   String?
  extra     Json?
  createdAt DateTime @default(now())

  @@map("facilities")
}

model Tag {
  id        String    @id @default(uuid())
  name      String    @unique
  official  Boolean   @default(false)
  createdBy String?
  createdAt DateTime  @default(now())
  posts     PostTag[]

  @@map("tags")
}

model PostTag {
  postId String
  tagId  String
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  tag    Tag    @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([postId, tagId])
  @@map("post_tags")
}

model PostVote {
  id        String   @id @default(uuid())
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    String
  user      user     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  createdAt DateTime @default(now())

  @@unique([postId, userId])
  @@map("post_votes")
}

model Post {
  id        String     @id @default(uuid())
  user      user       @relation(fields: [userId], references: [id])
  userId    String
  userAlias String
  title     String
  body      String
  upvotes   Int        @default(0)
  createdAt DateTime   @default(now())
  comments  Comment[]
  tags      PostTag[]
  votes     PostVote[]

  @@map("posts")
}

model Comment {
  id        String   @id @default(uuid())
  post      Post     @relation(fields: [postId], references: [id])
  postId    String
  user      user     @relation(fields: [userId], references: [id])
  userId    String
  userAlias String
  body      String
  createdAt DateTime @default(now())

  @@map("comments")
}

model EmergencyContact {
  id        String   @id @default(uuid())
  user      user     @relation(fields: [userId], references: [id])
  userId    String
  name      String
  phone     String?
  email     String?
  relation  String?
  createdAt DateTime @default(now())

  @@map("emergency_contacts")
}

model Alert {
  id        String   @id @default(uuid())
  user      user     @relation(fields: [userId], references: [id])
  userId    String
  type      String
  message   String?
  lat       Float?
  lng       Float?
  delivered Boolean  @default(false)
  createdAt DateTime @default(now())

  @@map("alerts")
}

model NotificationSetting {
  id        String   @id @default(uuid())
  user      user     @relation(fields: [userId], references: [id])
  userId    String   @unique
  sms       Boolean  @default(false)
  email     Boolean  @default(true)
  browser   Boolean  @default(true)
  timezone  String?
  createdAt DateTime @default(now())

  @@map("notification_settings")
}

enum VerificationPurpose {
  SIGNUP
  RESET_PASSWORD
}

model VerificationCode {
  id        String              @id @default(uuid())
  user      user                @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  email     String
  code      String
  purpose   VerificationPurpose
  expiresAt DateTime
  usedAt    DateTime?
  createdAt DateTime            @default(now())

  @@index([email, purpose])
  @@index([userId, purpose])
  @@map("verification_codes")
}
